% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core_utils.R
\name{util_natural_segment_rank}
\alias{util_natural_segment_rank}
\title{Segment-wise Natural Numeric Rank for Underscore-separated Strings}
\usage{
util_natural_segment_rank(x)
}
\arguments{
\item{x}{A character vector of underscore-separated strings, where each
segment should be compared as a number. Non-numeric characters are removed
before ranking.}
}
\value{
A character vector of dense group ranks ("1", "2", ...), same length
as \code{x}. Entries that become blank after cleaning are assigned "".
}
\description{
Returns a character vector assigning contiguous group ranks ("1", "2", ...,
"n") after segment-wise numeric ordering of underscore-separated strings.
Each segment between underscores is compared numerically, so "1_10_1" will
rank after "1_2_10", and so on. Handles any number of segments per entry.
Non-numeric characters are discarded, and non-numeric segments are treated as
NA.
}
\details{
Unlike \code{util_hierarchical_rank()}, this function first cleans the input:
removes all characters except digits and underscores, collapses multiple
underscores, and trims leading/trailing underscores. If a string becomes
blank after cleaning, it is assigned rank "" (empty string), and actual
ranking starts at "1" for non-blank entries.

This is useful for ranking IDs or codes like "1_2", "1_10", "2_1" in natural
numeric order rather than strict character order.
}
\section{Relation to \code{util_hierarchical_rank}}{
 Both
\code{util_natural_segment_rank()} and \link{util_hierarchical_rank} assign
dense ranks based on multi-level, segment-wise numeric ordering. When all
input values are valid numbers (no blanks after cleaning), then
\code{as.integer(util_natural_segment_rank(paste(x1, x2, sep = "_")))} will
produce the same result as \code{util_hierarchical_rank(x1, x2)}.
}

\section{Benchmark}{
 For 10,000 rows, \code{util_hierarchical_rank()} is about
10x faster (median ~1.8 ms) than \code{util_natural_segment_rank()} (median
~22.8 ms), because the latter incurs additional overhead from string
splitting and conversion.
}

\examples{
\dontrun{
util_natural_segment_rank(c("1_4_1", "1_5", "1_4_2", "1_40_1", "1_3",
                            "1_20"))
# [1] "2" "4" "3" "6" "1" "5"
x <- c("2", "3", "2_1", "3_1", "4_1", "5_1", "6_1", "7_1", "8", "9",
       "10", "1", "2_2", "3_2", "4_2", "5_2", "6_2", "7_2", "2", "3")
util_natural_segment_rank(x)

# Cleaned blanks get rank "":
util_natural_segment_rank(c("abc", "3_2", "2_2", ""))
# [1] ""  "2" "1" ""
}

}
\seealso{
\link{util_hierarchical_rank}
}
\keyword{internal}
