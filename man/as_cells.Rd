% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core_classes_public.R
\name{as_cells}
\alias{as_cells}
\title{Coerce an Object into a \code{cells} Object}
\usage{
as_cells(x, ...)
}
\arguments{
\item{x}{The R object to transform (e.g., \code{data.frame}, \code{matrix}, or outputs
from packages like \code{tidyxl}).}

\item{...}{Additional arguments passed on to specific methods.}
}
\value{
An object of class \code{cells}.
}
\description{
This S3 generic function standardizes various R objects into a \code{cells} object.

A \code{cells} object is a "tidy" representation of a single sheet's data, where
each row describes one cell's content and metadata (its position, data type,
and value). This function acts as a robust adapter to convert common data
structures into this single, well-defined format.
}
\details{
\code{as_cells()} is designed to handle multiple data formats gracefully:
\itemize{
\item \strong{Rectangular Data:} Standard \code{data.frame} and \code{matrix} objects are
"unpivoted" from their wide format into the long \code{cells} structure.

\item \strong{Specialized Tidy Formats:} It can efficiently adapt outputs from
other data-import and reshaping packages. The primary purpose is to create a
common structure from objects created by:
\itemize{
\item \code{\link[tidyxl]{xlsx_cells}} from the \pkg{tidyxl} package.
\item \code{\link[unpivotr]{as_cells}} from the \pkg{unpivotr} package.
\item The melted \code{data.frame} output from the \pkg{meltr} package.
}
}
}
\examples{
# Coerce a simple data frame into the 'cells' format
df <- data.frame(
  ID = c(101, 102),
  Score = c(95.5, 89.0),
  Grade = c("A", "B"),
  stringsAsFactors = FALSE
)

cells_data <- as_cells(df)
}
\seealso{
\code{\link[=as_sheets]{as_sheets()}} for handling multiple sheets.
\code{\link[tidyxl]{xlsx_cells}}, \code{\link[unpivotr]{as_cells}}.
}
